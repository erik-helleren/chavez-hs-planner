from django.shortcuts import render, redirect
from student.models import (Grade, Student, Attendance,
Email, Subject, Roster, DataFile, Assignment, NWEAPercentileConversion)
from student.helper_functions import df_from_query
from allauth.socialaccount.models import SocialAccount
from django.db import connection
from ontrack import (get_user_info, getOnTrack, getPoints, get_attend_pct, get_gpa,
get_test_score, gpa_subjects_list, take_out_subjects_list, get_grade_distribution)
#from grade_audit import generate_grade_audit
from classdata import hr_data
from summerschool import get_ss_report
from assignmentimpact import get_assign_impact
from blended_learning import get_all_jiji_json, get_last_two_jiji
from loadOnTrackData import *
from hardcoded import default_nwea_season
import pandas
import math
#streaming is for large datasets
from django.http import HttpResponseRedirect, HttpResponse, StreamingHttpResponse
from forms import DataFileForm
import csv
from StringIO import StringIO
import json
import numpy as np

# import ./views
#for plotting
import gviz_api


def summer_school(request):
    return views.upload_summer_school.render_upload_summer_school(request);

def show_test_react(request):
    return render(request, 'student/test-react.html')

def download_summer_school(request):
    return views.download_summer_school.render_download_summer_school(request)

def upload_files(request):
    if request.user.is_authenticated:
        user_id, user_type=get_user_info(request)
        if user_type == "School Admin":
            return views.upload_all_files.render_upload_all_files(request)    

    #if user is not logged in
    else:
        return render("404.html")

def grade_report(request):
    return views.grade_report.render_grade_report(request)

def show_home(request):
    # TODO: figure out authentication strategy
    try:
        if request.user.is_authenticated:
            social_email = SocialAccount.objects.get(user=request.user).extra_data['email']
            user_id, user_type=get_user_info(request)
            if user_type in ["School Admin", "Teacher"]:
                return views.homepage_all_rooms.render_homepage_all_rooms(request, social_email)
            else:
                display_hr_list=""

        else:
            social_email= "none"
            display_hr_list=""

        return render(request, "student/home.html", {'social_email': social_email,
         'display_hr_list': display_hr_list })

    except SocialAccount.DoesNotExist:
        return render(request, 'student/no-match-found.html')

def show_dashboard(request, student_id=1):
    lookup_user_id, user_type=get_user_info(request, student_id)
    return render(request, "student/dashboard.html", {'user_email': lookup_user_id})

def show_hr(request, selected_hr="B314"):
    if request.user.is_authenticated:
        user_id, user_type = get_user_info(request)

        if user_type in ["School Admin", "Teacher"] and selected_hr=="All":
            return views.homerooms_all.render_homerooms_all(request) 

        #just select data from one homeroom
        elif user_type in ["School Admin", "Teacher"]:
            return views.homerooms_single.render_homerooms_single(request)

        else:
            return render("404.html")

def show_student(request, student_id=1):
    return views.student_page.render_student_page(request, student_id)

def show_student_ontrack(request, student_id=1):
    student = Student.objects.get(student_id=str(student_id))
    template_vars = {'current_student': student}
    return render(request, "student/student_ontrack.html", template_vars)

def show_hs_options(request, student_id=1):
    return views.render_hs_page.render_hs_page(request, student_id)

def show_nwea_summary(request, student_id=1, selected_hr="A308"):
    
    if request.user.is_authenticated:
        user_id, user_type = get_user_info(request, student_id)
        if user_type == "School Admin" or user_type == "Teacher":
            return views.render_nwea_summary.render_nwea_summary(request, student_id, selected_hr)

    # if either condition fails, return 404
    return render(request, "student/404.html")

def show_student_grades(request, student_id=1):
    return views.render_student_grades.render_student_grades(request, student_id)

def show_student_assignments(request, student_id=1, display_subject="Math"):
    return views.render_student_assignments.render_student_assignments(request, student_id, display_subject)

def show_student_attendance(request, student_id=1):
    return views.render_student_attendance.render_student_attendance(request, student_id)

def show_teacher_attendance(request):
    return views.render_teacher_attendance.render_teacher_attendance(request)
